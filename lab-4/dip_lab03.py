# -*- coding: utf-8 -*-
"""DIP_LAB03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HFbEk8J_FKqS8aHW9WZxlW0ZqUZrXbwJ
"""

import numpy as np
import glob
import matplotlib.pyplot as plt
import skimage.io
import skimage.color
import skimage.filters

img = skimage.io.imread(fname="images/dog.jpg")
fig, axis = plt.subplots()
plt.imshow(img)

# convert the image to grayscale
grayImage = skimage.color.rgb2gray(img)
fig, axis = plt.subplots()
plt.imshow(grayImage)
# blur the image to denoise
blurred_image = skimage.filters.gaussian(grayImage, sigma=1.0)

# show the histogram of the blurred image
histogram, bin_edges = np.histogram(blurred_image, bins=256, range=(0.0, 1.0))
fig, ax = plt.subplots()
plt.plot(bin_edges[0:-1], histogram)
plt.title("Graylevel histogram")
plt.xlabel("gray value")
plt.ylabel("pixel count")
plt.xlim(0, 1.0)

# perform automatic thresholding
t = skimage.filters.threshold_otsu(blurred_image)
print("Found automatic threshold t = {}.".format(t))

# create a binary mask with the threshold found by Otsu's method
binary_mask = blurred_image > t

fig, ax = plt.subplots()
plt.imshow(binary_mask, cmap="gray")

# apply the binary mask to select the foreground
selection = img.copy()
selection[~binary_mask] = 0

fig, ax = plt.subplots()
plt.imshow(selection)

# create a binary mask with the threshold taking t
t = 0.65
binary_mask = blurred_image > t

fig, ax = plt.subplots()
plt.imshow(binary_mask, cmap="gray")

odd=[]
even=[]